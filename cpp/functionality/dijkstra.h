#pragma once
#include "graph.h"

// returns list of corresponding parents generated by 
// Dijkstra's shortest path algorithm
unordered_map<string, string> dijkstra(Graph& graph, const string& src) {
   
   unordered_set<string> computed;
   unordered_set<string> unprocessed;
   unordered_map<string, int> dist;
   unordered_map<string, string> parent;   

    // initial seeding
    for (auto edge : graph.adjList) {
        unprocessed.insert(edge.first);
        dist[edge.first] = INT_MAX;
        parent[edge.first] = "-1";
    }

    dist[src] = 0;

    // filling out distances and parents
    while (!unprocessed.empty()) {

        // finding smallest distance
        string curr = "";
        int currDist = INT_MAX;
        for (auto vertex : unprocessed) 
            if (currDist > dist[vertex]) {
                curr = vertex;
                currDist = dist[vertex];
            }

        // processing vertex
        computed.insert(curr);
        unprocessed.erase(curr);

        // relaxing
        for (auto edge : graph.adjList[curr]) 
            if (dist[edge] > dist[curr] + 1) {
                dist[edge] = dist[curr] + 1;
                parent[edge] = curr;
            }
    }

   return parent;
}